// <auto-generated />
using System;
using Around.DataAccess.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Around.DataAccess.SqlServer.Migrations
{
    [DbContext(typeof(DronesharingContext))]
    [Migration("20181205220022_UpdateDbConfig")]
    partial class UpdateDbConfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Around.Core.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PassportSnapshot");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Around.Core.Entities.Aircraft", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Connectors");

                    b.Property<int>("EngineType");

                    b.Property<int>("FlameMaterial");

                    b.Property<bool>("HasFoldableDesign");

                    b.HasKey("Id");

                    b.ToTable("Aircraft");
                });

            modelBuilder.Entity("Around.Core.Entities.Battery", b =>
                {
                    b.Property<int>("Id");

                    b.Property<double>("Capacity");

                    b.Property<double>("ChargingSpeed");

                    b.HasKey("Id");

                    b.ToTable("Battery");
                });

            modelBuilder.Entity("Around.Core.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Around.Core.Entities.Camera", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CameraMount");

                    b.Property<bool>("HasCameraRotation");

                    b.Property<string>("IsoSensetivity");

                    b.Property<string>("Lens");

                    b.Property<string>("PhotoModes");

                    b.Property<int>("Resolution");

                    b.Property<int>("Stabilization");

                    b.HasKey("Id");

                    b.ToTable("Camera");
                });

            modelBuilder.Entity("Around.Core.Entities.Characteristics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AmbientTemperature");

                    b.Property<string>("Colour");

                    b.Property<int>("FullCharacteristicsId");

                    b.Property<double>("Height");

                    b.Property<double>("Length");

                    b.Property<double>("PropellersCount");

                    b.Property<double>("Weight");

                    b.Property<double>("Widht");

                    b.HasKey("Id");

                    b.HasIndex("FullCharacteristicsId")
                        .IsUnique();

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("Around.Core.Entities.Cheque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<int>("RentId");

                    b.Property<double>("TotalPrice");

                    b.HasKey("Id");

                    b.HasIndex("RentId")
                        .IsUnique();

                    b.ToTable("Cheques");
                });

            modelBuilder.Entity("Around.Core.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscountId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PassportSnapshot");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Around.Core.Entities.Copter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<int>("Control");

                    b.Property<double>("CostPerMinute");

                    b.Property<int>("DroneType");

                    b.Property<int?>("FullCharacteristicsId");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<double>("MaxFlightHeight");

                    b.Property<double>("MaxSpeed");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Copters");
                });

            modelBuilder.Entity("Around.Core.Entities.Country", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryName");

                    b.HasKey("Code");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Around.Core.Entities.CreditCard", b =>
                {
                    b.Property<string>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Cvv");

                    b.Property<string>("ValidThru");

                    b.HasKey("Number");

                    b.HasIndex("ClientId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Around.Core.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Percentage");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Around.Core.Entities.Equipment", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("HasAccelerometer");

                    b.Property<bool>("HasBarometer");

                    b.Property<bool>("HasGps");

                    b.Property<bool>("HasGyroscope");

                    b.Property<bool>("HasMagnetometer");

                    b.Property<bool>("HasMemoryCardSupport");

                    b.Property<int>("InternalMemory");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("Around.Core.Entities.Flight", b =>
                {
                    b.Property<int>("Id");

                    b.Property<double>("DescentSpeed");

                    b.Property<double>("FlightTime");

                    b.Property<double>("LiftingSpeed");

                    b.Property<double>("MaximumHeight");

                    b.Property<double>("MaximumSpeed");

                    b.Property<double>("MinimumSpeed");

                    b.HasKey("Id");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Around.Core.Entities.FullCharacteristics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AircraftId");

                    b.Property<int>("BatteryId");

                    b.Property<int>("CameraId");

                    b.Property<int>("CharacteristicId");

                    b.Property<int>("CopterId");

                    b.Property<int>("EquipmentId");

                    b.Property<int>("FlightId");

                    b.Property<int>("LoadCapacityId");

                    b.Property<int>("ModesId");

                    b.Property<int>("RemoteControlId");

                    b.Property<int>("TransportCharacteristicsId");

                    b.HasKey("Id");

                    b.HasIndex("CopterId")
                        .IsUnique();

                    b.ToTable("FullCharacteristics");
                });

            modelBuilder.Entity("Around.Core.Entities.LoadCapacity", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("LoadMountsCount");

                    b.Property<double>("MaximumWeight");

                    b.HasKey("Id");

                    b.ToTable("LoadCapacity");
                });

            modelBuilder.Entity("Around.Core.Entities.Modes", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("HasCfmPositioning");

                    b.Property<bool>("HasFirstPersonView");

                    b.Property<bool>("HasReturnBase");

                    b.Property<bool>("HasTracking");

                    b.Property<bool>("HasTrick");

                    b.HasKey("Id");

                    b.ToTable("Modes");
                });

            modelBuilder.Entity("Around.Core.Entities.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("CopterId");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CopterId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("Around.Core.Entities.TransportCharacteristics", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("HasAirbag");

                    b.Property<bool>("HasAutopilot");

                    b.Property<int>("SeatCount");

                    b.HasKey("Id");

                    b.ToTable("TransportCharacteristics");
                });

            modelBuilder.Entity("Around.Core.Entities.Aircraft", b =>
                {
                    b.HasOne("Around.Core.Entities.FullCharacteristics", "FullCharacteristics")
                        .WithOne("Aircraft")
                        .HasForeignKey("Around.Core.Entities.Aircraft", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.Battery", b =>
                {
                    b.HasOne("Around.Core.Entities.FullCharacteristics", "FullCharacteristics")
                        .WithOne("Battery")
                        .HasForeignKey("Around.Core.Entities.Battery", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.Brand", b =>
                {
                    b.HasOne("Around.Core.Entities.Country", "Country")
                        .WithMany("Brands")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Around.Core.Entities.Camera", b =>
                {
                    b.HasOne("Around.Core.Entities.FullCharacteristics", "FullCharacteristics")
                        .WithOne("Camera")
                        .HasForeignKey("Around.Core.Entities.Camera", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.Characteristics", b =>
                {
                    b.HasOne("Around.Core.Entities.FullCharacteristics", "FullCharacteristics")
                        .WithOne("Characteristics")
                        .HasForeignKey("Around.Core.Entities.Characteristics", "FullCharacteristicsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.Cheque", b =>
                {
                    b.HasOne("Around.Core.Entities.Rent", "Rent")
                        .WithOne("Cheque")
                        .HasForeignKey("Around.Core.Entities.Cheque", "RentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.Client", b =>
                {
                    b.HasOne("Around.Core.Entities.Discount", "Discount")
                        .WithMany("Client")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.Copter", b =>
                {
                    b.HasOne("Around.Core.Entities.Brand", "Brand")
                        .WithMany("Copters")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.CreditCard", b =>
                {
                    b.HasOne("Around.Core.Entities.Client", "Client")
                        .WithMany("CreditCards")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.Equipment", b =>
                {
                    b.HasOne("Around.Core.Entities.FullCharacteristics", "FullCharacteristics")
                        .WithOne("Equipment")
                        .HasForeignKey("Around.Core.Entities.Equipment", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.Flight", b =>
                {
                    b.HasOne("Around.Core.Entities.FullCharacteristics", "FullCharacteristics")
                        .WithOne("Flight")
                        .HasForeignKey("Around.Core.Entities.Flight", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.FullCharacteristics", b =>
                {
                    b.HasOne("Around.Core.Entities.Copter", "Copter")
                        .WithOne("FullCharacteristics")
                        .HasForeignKey("Around.Core.Entities.FullCharacteristics", "CopterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.LoadCapacity", b =>
                {
                    b.HasOne("Around.Core.Entities.FullCharacteristics", "FullCharacteristics")
                        .WithOne("LoadCapacity")
                        .HasForeignKey("Around.Core.Entities.LoadCapacity", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.Modes", b =>
                {
                    b.HasOne("Around.Core.Entities.FullCharacteristics", "FullCharacteristics")
                        .WithOne("Modes")
                        .HasForeignKey("Around.Core.Entities.Modes", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.Rent", b =>
                {
                    b.HasOne("Around.Core.Entities.Client", "Client")
                        .WithMany("Rent")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Around.Core.Entities.Copter", "Copter")
                        .WithMany("Rents")
                        .HasForeignKey("CopterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Around.Core.Entities.TransportCharacteristics", b =>
                {
                    b.HasOne("Around.Core.Entities.FullCharacteristics", "FullCharacteristics")
                        .WithOne("TransportCharacteristics")
                        .HasForeignKey("Around.Core.Entities.TransportCharacteristics", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
